import asyncio
import logging
import os
from pathlib import Path
from typing import Dict, List, Tuple
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
APP_ROOT = Path(__file__).resolve().parent
INFO_DIR_NAME = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
INFO_ROOT = APP_ROOT / INFO_DIR_NAME

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
subscribers: set[int] = set()  # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
known_files: set[str] = set()  # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
user_progress: Dict[int, Dict[str, bool]] = {}  # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_content_messages: Dict[int, List[int]] = {}  # ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –æ—á–∏—Å—Ç–∫–∏

# ===== –£–ü–†–û–©–ï–ù–ù–´–ï –≠–ú–û–î–ó–ò =====
def get_emoji(name: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    name_lower = name.lower()
    if any(word in name_lower for word in ["–±–∞–∑–æ–≤—ã–π", "–≤–≤–µ–¥–µ–Ω–∏–µ", "—á—Ç–æ —Ç–∞–∫–æ–µ"]):
        return "üü¢"
    elif any(word in name_lower for word in ["—Å—Ä–µ–¥–Ω–∏–π", "–∞—Ç–∞–∫–∞", "—á–µ–ª–æ–≤–µ–∫"]):
        return "üü°"
    elif any(word in name_lower for word in ["–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "—Ñ–∏—à–∏–Ω–≥", "–≤–∑–ª–æ–º"]):
        return "üî¥"
    elif any(word in name_lower for word in ["–∫–æ–º–∞–Ω–¥—ã", "—Å–∏—Å—Ç–µ–º–∞", "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]):
        return "üîµ"
    elif any(word in name_lower for word in ["–≤–≤–µ–¥–µ–Ω–∏–µ", "—á—Ç–æ —Ç–∞–∫–æ–µ"]):
        return "üëã"
    elif any(word in name_lower for word in ["–∫–æ–º–∞–Ω–¥—ã", "—Å–∏—Å—Ç–µ–º–∞"]):
        return "‚ö°"
    elif any(word in name_lower for word in ["–∞—Ç–∞–∫–∞", "—Ñ–∏—à–∏–Ω–≥"]):
        return "üéØ"
    else:
        return "üìÅ" if "dir" in name_lower else "üìò"


class PathRegistry:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∏ –≤—ã–¥–∞—ë—Ç –∫–æ—Ä–æ—Ç–∫–∏–µ id –¥–ª—è callback_data."""

    def __init__(self) -> None:
        self._id_to_path: Dict[str, Tuple[str, str]] = {}
        self._path_to_id: Dict[Tuple[str, str], str] = {}
        self._counter: int = 0

    def get_id(self, kind: str, rel_path: str) -> str:
        key = (kind, rel_path)
        if key in self._path_to_id:
            return self._path_to_id[key]
        self._counter += 1
        assigned_id = str(self._counter)
        self._path_to_id[key] = assigned_id
        self._id_to_path[assigned_id] = (kind, rel_path)
        return assigned_id

    def resolve(self, assigned_id: str) -> Tuple[str, str]:
        return self._id_to_path[assigned_id]




# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

def ensure_info_root() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    if not INFO_ROOT.exists() or not INFO_ROOT.is_dir():
        raise FileNotFoundError(
            f"–ü–∞–ø–∫–∞ '{INFO_DIR_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä—è–¥–æ–º —Å —Ñ–∞–π–ª–æ–º: {APP_ROOT}"
        )


def list_dir(rel_dir: str) -> Tuple[List[Tuple[str, str]], List[Tuple[str, str]]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ .txt —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    base = (INFO_ROOT / rel_dir).resolve()
    if INFO_ROOT not in base.parents and base != INFO_ROOT:
        raise PermissionError("–í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â—ë–Ω")

    dir_items: List[Tuple[str, str]] = []
    file_items: List[Tuple[str, str]] = []
    for entry in sorted(base.iterdir(), key=lambda p: (not p.is_dir(), p.name.lower())):
        if entry.is_dir():
            dir_items.append((entry.name, str((Path(rel_dir) / entry.name).as_posix())))
        else:
            if entry.suffix.lower() == ".txt":
                file_items.append((entry.stem, str((Path(rel_dir) / entry.name).as_posix())))
    return dir_items, file_items


def read_text_file(rel_path: str) -> str:
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .txt —Ñ–∞–π–ª–∞"""
    file_path = (INFO_ROOT / rel_path).resolve()
    if INFO_ROOT not in file_path.parents and file_path != INFO_ROOT:
        raise PermissionError("–í—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â—ë–Ω")
    with open(file_path, "r", encoding="utf-8") as f:
        return f.read()








async def clear_user_messages(bot: Bot, chat_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ"""
    ids = user_content_messages.get(chat_id) or []
    if not ids:
        return
    for mid in ids:
        try:
            await bot.delete_message(chat_id, mid)
        except Exception:
            pass
    user_content_messages[chat_id] = []



def build_dir_keyboard(rel_dir: str, user_id: int = 0) -> InlineKeyboardMarkup:
    dirs, files = list_dir(rel_dir)
    rows: List[List[InlineKeyboardButton]] = []

    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    for display_name, child_rel in dirs:
        iid = path_registry.get_id("dir", child_rel)
        emoji = get_emoji(display_name)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è
        progress = ""
        if user_id and user_id in user_progress:
            studied_count = sum(1 for f in files if user_progress[user_id].get(f[1], False))
            total_count = len(files)
            if total_count > 0:
                progress = f" ({studied_count}/{total_count})"
        
        rows.append([InlineKeyboardButton(
            text=f"{emoji} {display_name}{progress}", 
            callback_data=f"open_dir:{iid}"
        )])

    # –§–∞–π–ª—ã —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π –∏–∑—É—á–µ–Ω–∏—è
    for display_name, child_rel in files:
        iid = path_registry.get_id("file", child_rel)
        emoji = get_emoji(display_name)
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑—É—á–µ–Ω–∏—è
        studied = "‚úÖ" if user_id and user_progress.get(user_id, {}).get(child_rel, False) else "üìñ"
        rows.append([InlineKeyboardButton(
            text=f"{studied} {emoji} {display_name}", 
            callback_data=f"open_file:{iid}"
        )])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row: List[InlineKeyboardButton] = []
    if rel_dir:
        parent = str(Path(rel_dir).parent.as_posix()) if Path(rel_dir).parent.as_posix() != "." else ""
        pid = path_registry.get_id("dir", parent)
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"open_dir:{pid}"))
    home_id = path_registry.get_id("dir", "")
    nav_row.append(InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data=f"open_dir:{home_id}"))
    rows.append(nav_row)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    action_row = []
    cur_id = path_registry.get_id("dir", rel_dir)
    action_row.append(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"open_dir:{cur_id}"))
    action_row.append(InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="search"))
    action_row.append(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    rows.append(action_row)

    return InlineKeyboardMarkup(inline_keyboard=rows)


def build_home_keyboard(user_id: int = 0) -> InlineKeyboardMarkup:
    home_id = path_registry.get_id("dir", "")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    stats_text = ""
    if user_id and user_id in user_progress:
        total_files = len(scan_all_txt())
        studied_files = sum(1 for f in user_progress[user_id].values() if f)
        if total_files > 0:
            percentage = (studied_files / total_files) * 100
            stats_text = f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {studied_files}/{total_files} ({percentage:.1f}%)"
    
    buttons = [
        [InlineKeyboardButton(text="üöÄ –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∏–∑—É—á–µ–Ω–∏—é Kali Linux", callback_data=f"open_dir:{home_id}")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="search")],
        [InlineKeyboardButton(text="üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="üéØ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", callback_data="random")]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
path_registry = PathRegistry()

# ===== –û–°–ù–û–í–ù–û–ô –†–û–£–¢–ï–† =====
router = Router()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====

@router.message(CommandStart())
async def on_start(message: Message) -> None:
    ensure_info_root()
    subscribers.add(message.chat.id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.from_user.id not in user_progress:
        user_progress[message.from_user.id] = {}
    
    greeting = (
        "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kali Linux Academy!</b>\n\n"
        "üî• <i>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</i>\n\n"
        "üìö <b>–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:</b>\n"
        "üü¢ <b>–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å</b> ‚Äî –æ—Å–Ω–æ–≤—ã –∏ –≤–≤–µ–¥–µ–Ω–∏–µ\n"
        "üü° <b>–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å</b> ‚Äî –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏\n"
        "üî¥ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å</b> ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏\n\n"
        "‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
        "‚Ä¢ –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π\n\n"
        "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
    )
    await message.answer(greeting, reply_markup=build_home_keyboard(message.from_user.id))

@router.message(Command("stop"))
async def on_stop(message: Message) -> None:
    if message.chat.id in subscribers:
        subscribers.discard(message.chat.id)
    await message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö.")


@router.message(Command("home"))
async def on_home(message: Message) -> None:
    await on_start(message)

@router.message(Command("search"))
async def on_search_command(message: Message) -> None:
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–∫–æ–º–∞–Ω–¥—ã</code>, <code>–∞—Ç–∞–∫–∞</code>, <code>–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</code>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="home")]
        ])
    )


@router.message(Command("stats"))
async def on_stats_command(message: Message) -> None:
    user_id = message.from_user.id
    if user_id not in user_progress:
        user_progress[user_id] = {}
    
    total_files = len(scan_all_txt())
    studied_files = sum(1 for f in user_progress[user_id].values() if f)
    
    if total_files == 0:
        await message.answer("üìä –ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
        return
    
    percentage = (studied_files / total_files) * 100
    progress_bar = "üü©" * int(percentage / 10) + "‚¨ú" * (10 - int(percentage / 10))
    
    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
        f"üìö –ò–∑—É—á–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: <b>{studied_files}/{total_files}</b>\n"
        f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{percentage:.1f}%</b>\n\n"
        f"<code>{progress_bar}</code>\n\n"
    )
    
    if studied_files == total_files:
        stats_text += "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!</b>"
    elif studied_files > 0:
        remaining = total_files - studied_files
        stats_text += f"üí™ –û—Å—Ç–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å: <b>{remaining}</b> –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    else:
        stats_text += "üöÄ –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤!"
    
    await message.answer(stats_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="home")]
    ]))


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK =====

@router.callback_query(F.data.startswith("open_dir:"))
async def on_open_dir(callback: CallbackQuery) -> None:
    try:
        assigned_id = callback.data.split(":", 1)[1]
        kind, rel_path = path_registry.resolve(assigned_id)
        if kind != "dir":
            await callback.answer("–≠—Ç–æ –Ω–µ –ø–∞–ø–∫–∞", show_alert=False)
            return
        
        user_id = callback.from_user.id
        kb = build_dir_keyboard(rel_path, user_id)
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
        if rel_path:
            section_name = Path(rel_path).name
            emoji = get_emoji(section_name)
            title = f"{emoji} {section_name}\n–†–∞–∑–¥–µ–ª: {rel_path}\n‚Äî‚Äî‚Äî"
        else:
            title = f"üéØ Kali Linux Academy\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n‚Äî‚Äî‚Äî"
        
        # –û—á–∏—â–∞–µ–º —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
        await clear_user_messages(callback.message.bot, callback.message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        try:
            await callback.message.edit_text(title, reply_markup=kb)
        except Exception as edit_error:
            if "message is not modified" in str(edit_error):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º
                await callback.answer()
                return
            else:
                raise edit_error
        await callback.answer()
    except KeyError:
        await callback.answer("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏", show_alert=True)




@router.callback_query(F.data.startswith("open_file:"))
async def on_open_file(callback: CallbackQuery) -> None:
    try:
        assigned_id = callback.data.split(":", 1)[1]
        kind, rel_path = path_registry.resolve(assigned_id)
        if kind != "file":
            await callback.answer("–≠—Ç–æ –Ω–µ —Ñ–∞–π–ª", show_alert=False)
            return
        
        # –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–π
        user_id = callback.from_user.id
        if user_id not in user_progress:
            user_progress[user_id] = {}
        user_progress[user_id][rel_path] = True
        
        text = read_text_file(rel_path)
        parent_dir = str(Path(rel_path).parent.as_posix()) if Path(rel_path).parent.as_posix() != "." else ""
        kb = build_dir_keyboard(parent_dir, user_id)
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
        file_name = Path(rel_path).name
        emoji = get_emoji(file_name)
        header = f"‚úÖ {emoji} {file_name}\n–†–∞–∑–¥–µ–ª: {str(Path(rel_path).parent.as_posix() or '/')}\n‚Äî‚Äî‚Äî"

        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å timeout
        await callback.answer("‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–π!")

        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
        await clear_user_messages(callback.message.bot, callback.message.chat.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (HTML)
        await callback.message.edit_text(header, reply_markup=kb)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .txt —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        if len(text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        else:
            parts = [text]
        
        sent_ids: List[int] = []
        for part in parts:
            try:
                msg = await callback.message.answer(part)
                sent_ids.append(msg.message_id)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        if sent_ids:
            user_content_messages[callback.message.chat.id] = sent_ids
    except KeyError:
        try:
            await callback.answer("–°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ ‚Äî –æ—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ callback
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: %s", e)
        try:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏", show_alert=True)
        except:
            pass


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –ö–ù–û–ü–û–ö =====

@router.callback_query(F.data == "search")
async def on_search_callback(callback: CallbackQuery) -> None:
    await clear_user_messages(callback.message.bot, callback.message.chat.id)
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–∫–æ–º–∞–Ω–¥—ã</code>, <code>–∞—Ç–∞–∫–∞</code>, <code>–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</code>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="home")]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(F.data == "stats")
async def on_stats_callback(callback: CallbackQuery) -> None:
    await clear_user_messages(callback.message.bot, callback.message.chat.id)
    user_id = callback.from_user.id
    if user_id not in user_progress:
        user_progress[user_id] = {}
    
    total_files = len(scan_all_txt())
    studied_files = sum(1 for f in user_progress[user_id].values() if f)
    
    if total_files == 0:
        await callback.message.edit_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
        return
    
    percentage = (studied_files / total_files) * 100
    progress_bar = "üü©" * int(percentage / 10) + "‚¨ú" * (10 - int(percentage / 10))
    
    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑—É—á–µ–Ω–∏—è</b>\n\n"
        f"üìö –ò–∑—É—á–µ–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: <b>{studied_files}/{total_files}</b>\n"
        f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: <b>{percentage:.1f}%</b>\n\n"
        f"<code>{progress_bar}</code>\n\n"
    )
    
    if studied_files == total_files:
        stats_text += "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã!</b>"
    elif studied_files > 0:
        remaining = total_files - studied_files
        stats_text += f"üí™ –û—Å—Ç–∞–ª–æ—Å—å –∏–∑—É—á–∏—Ç—å: <b>{remaining}</b> –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
    else:
        stats_text += "üöÄ –ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤!"
    
    await callback.message.edit_text(stats_text, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="home")]
    ]), parse_mode=ParseMode.HTML)
    await callback.answer()

@router.callback_query(F.data == "random")
async def on_random_callback(callback: CallbackQuery) -> None:
    all_files = list(scan_all_txt())
    if not all_files:
        await clear_user_messages(callback.message.bot, callback.message.chat.id)
        await callback.message.edit_text("üìö –ü–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
        return
    
    import random
    random_file = random.choice(all_files)
    file_id = path_registry.get_id("file", random_file)
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–π–ª
    try:
        kind, rel_path = path_registry.resolve(file_id)
        if kind != "file":
            await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞", show_alert=True)
            return
        
        # –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–π
        user_id = callback.from_user.id
        if user_id not in user_progress:
            user_progress[user_id] = {}
        user_progress[user_id][rel_path] = True
        
        text = read_text_file(rel_path)
        parent_dir = str(Path(rel_path).parent.as_posix()) if Path(rel_path).parent.as_posix() != "." else ""
        kb = build_dir_keyboard(parent_dir, user_id)
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
        file_name = Path(rel_path).name
        emoji = get_emoji(file_name)
        header = f"üéØ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª\n\n‚úÖ {emoji} {file_name}\n–†–∞–∑–¥–µ–ª: {str(Path(rel_path).parent.as_posix() or '/')}\n‚Äî‚Äî‚Äî"

        await clear_user_messages(callback.message.bot, callback.message.chat.id)
        await callback.message.edit_text(header, reply_markup=kb)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .txt —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        if len(text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
        else:
            parts = [text]
        
        sent_ids: List[int] = []
        for part in parts:
            try:
                msg = await callback.message.answer(part)
                sent_ids.append(msg.message_id)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        if sent_ids:
            user_content_messages[callback.message.chat.id] = sent_ids
        await callback.answer("üéØ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—ã–±—Ä–∞–Ω! ‚úÖ –û—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—ã–π!")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %s", e)
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏", show_alert=True)

@router.callback_query(F.data == "home")
async def on_home_callback(callback: CallbackQuery) -> None:
    await clear_user_messages(callback.message.bot, callback.message.chat.id)
    user_id = callback.from_user.id
    if user_id not in user_progress:
        user_progress[user_id] = {}
    
    greeting = (
        "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kali Linux Academy!</b>\n\n"
        "üî• <i>–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</i>\n\n"
        "üìö <b>–ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç:</b>\n"
        "üü¢ <b>–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å</b> ‚Äî –æ—Å–Ω–æ–≤—ã –∏ –≤–≤–µ–¥–µ–Ω–∏–µ\n"
        "üü° <b>–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å</b> ‚Äî –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏\n"
        "üî¥ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å</b> ‚Äî —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏\n\n"
        "‚ú® <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑—É—á–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
        "‚Ä¢ –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π\n\n"
        "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
    )
    await callback.message.edit_text(greeting, reply_markup=build_home_keyboard(user_id), parse_mode=ParseMode.HTML)
    await callback.answer()


# ===== –ü–û–ò–°–ö –ü–û –¢–ï–ö–°–¢–£ =====

@router.message()
async def on_text_search(message: Message) -> None:
    if not message.text or message.text.startswith('/'):
        return
    
    search_term = message.text.lower().strip()
    if len(search_term) < 2:
        await message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    results = []
    for file_path in scan_all_txt():
        try:
            content = read_text_file(file_path).lower()
            if search_term in content or search_term in file_path.lower():
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                lines = content.split('\n')
                matching_lines = []
                for i, line in enumerate(lines):
                    if search_term in line:
                        start = max(0, i-1)
                        end = min(len(lines), i+2)
                        context = '\n'.join(lines[start:end])
                        matching_lines.append(context[:200] + "..." if len(context) > 200 else context)
                        if len(matching_lines) >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                            break
                
                if matching_lines:
                    results.append((file_path, matching_lines))
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ —Ñ–∞–π–ª–µ {file_path}: {e}")
    
    if not results:
        await message.answer(
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="home")]
            ]),
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_term}'\n\n"
    
    for i, (file_path, contexts) in enumerate(results[:5]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        file_name = Path(file_path).name
        emoji = get_emoji(file_name)
        response += f"{i+1}. {emoji} {file_name}\n"
        response += f"–ü—É—Ç—å: {file_path}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞
        file_id = path_registry.get_id("file", file_path)
        
        for context in contexts[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 2 –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            response += f"{context}\n"
        
        response += "\n"
    
    if len(results) > 5:
        response += f"... –∏ –µ—â—ë {len(results) - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    for i, (file_path, _) in enumerate(results[:3]):  # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        file_name = Path(file_path).name
        file_id = path_registry.get_id("file", file_path)
        buttons.append([InlineKeyboardButton(text=f"üìñ {file_name}", callback_data=f"open_file:{file_id}")])
    
    buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="home")])
    
    await message.answer(response, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons), parse_mode=ParseMode.HTML)


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====

def scan_all_txt() -> set[str]:
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ .txt —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    files: set[str] = set()
    for path in INFO_ROOT.rglob("*.txt"):
        rel = path.relative_to(INFO_ROOT).as_posix()
        files.add(rel)
    return files


async def watch_info_changes(bot: Bot, interval_seconds: int = 10) -> None:
    """–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–ø–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    global known_files
    known_files = scan_all_txt()
    while True:
        try:
            current = scan_all_txt()
            new_files = current - known_files
            if new_files:
                for rel in sorted(new_files):
                    parent_dir = str(Path(rel).parent.as_posix()) if Path(rel).parent.as_posix() != "." else ""
                    file_id = path_registry.get_id("file", rel)
                    dir_id = path_registry.get_id("dir", parent_dir)
                    kb = InlineKeyboardMarkup(
                        inline_keyboard=[
                            [InlineKeyboardButton(text="üìò –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª", callback_data=f"open_file:{file_id}")],
                            [InlineKeyboardButton(text="üìÇ –û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª", callback_data=f"open_dir:{dir_id}")],
                        ]
                    )
                    for chat_id in list(subscribers):
                        try:
                            await bot.send_message(chat_id, f"üÜï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª: {rel}", reply_markup=kb)
                        except Exception as e:
                            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ %s: %s", chat_id, e)
                known_files = current
        except Exception as e:
            logging.warning("–û—à–∏–±–∫–∞ –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ –ø–∞–ø–∫–∏: %s", e)
        await asyncio.sleep(interval_seconds)


# ===== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê =====

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(level=logging.INFO)
    ensure_info_root()

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
    env_path = APP_ROOT / ".env"
    load_dotenv(dotenv_path=env_path, override=False)
    token = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN")
    
    if not token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω. –£–∫–∞–∂–∏—Ç–µ TELEGRAM_BOT_TOKEN –∏–ª–∏ BOT_TOKEN –≤ .env")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    token = token.strip()
    if "PASTE_YOUR_TOKEN_HERE" in token or token == "":
        raise RuntimeError("–í .env –æ—Å—Ç–∞–≤–ª–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ç–æ–∫–µ–Ω–∞. –í—Å—Ç–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather")

    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    
    async with Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML)) as bot:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        try:
            await bot.get_me()
        except Exception as e:
            logging.error("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: %r", e)
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ polling
        asyncio.create_task(watch_info_changes(bot))
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


# ===== –¢–û–ß–ö–ê –í–•–û–î–ê =====

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        pass
